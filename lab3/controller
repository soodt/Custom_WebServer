# Lab3 Skeleton

from pox.core import core
from netaddr import IPAddress, IPNetwork
import pox.openflow.libopenflow_01 as of

log = core.getLogger()

class Routing (object):
  """
  A Firewall object is created for each switch that connects.
  A Connection object for that switch is passed to the __init__ function.
  """
  def __init__ (self, connection):
    # Keep track of the connection to the switch so that we can
    # send it messages!
    self.connection = connection

    # This binds our PacketIn event listener
    connection.addListeners(self)

  def do_routing (self, packet, packet_in, port_on_switch, switch_id):
    # port_on_swtich - the port on which this packet was received
    # switch_id - the switch which received this packet
    src = packet.find('ipv4')
    src_ip = src.srcip if src else None
    dest = packet.find('ipv4')
    dest_ip = dest.dstip if dest else None
    # Your code here

    def findOutPort(packet,switch_id,subnet,port_on_switch,dest_ip):
      log.info("------------------------------------- switch id = %s",switch_id)
      if(switch_id==1):
        if(port_on_switch == 5):
          if(dest_ip == '200.20.3.4'):
            return 1
          elif (dest_ip == '200.20.3.5'):
            return 2
        else:
          return 5
      elif(switch_id==2):
        if(port_on_switch == 2):
          if(dest_ip == '200.20.4.6'):
            return 3
          elif (dest_ip == '200.20.4.7'):
            return 1
        else:
          return 2
      elif(switch_id==3):
        if(port_on_switch == 3):
          if(dest_ip == '200.20.1.1'):
            return 1
          elif (dest_ip == '200.20.1.2'):
            return 2
          elif (dest_ip == '200.20.1.3'):
            return 4
        else:
          return 3
      elif(switch_id==4):
        if(port_on_switch == 4):
          if(dest_ip == '200.20.2.8'):
            return 1
          elif (dest_ip == '200.20.2.10'):
            return 3
          elif (dest_ip == '200.20.2.9'):
            return 2
        else:
          return 4
      else:
        if(subnet=="SALES"):
          return 4
        elif(subnet=="IT"):
          return 2
        elif(subnet=="DATACENTER"):
          return 3
        elif(subnet=="OT"):
          return 5

    def accept_packet(self,packet,packet_in, switch_id, subnet, port_on_switch,dest_ip):
        
        out_port1 = (findOutPort(packet, switch_id, subnet, port_on_switch,dest_ip))
        log.info("------------------------------------- out port = %s, switch id = %s, subnet = %s, in port= %s, des ip = %s",out_port1, switch_id,subnet,port_on_switch,dest_ip)
        out_port = int(out_port1)
        
        msg2 = of.ofp_flow_mod()
        msg2.match = of.ofp_match.from_packet(packet, port_on_switch)
        msg2.idle_timeout = 30
        msg2.actions.append(of.ofp_action_output(port = out_port))
        msg2.data = packet_in
        self.connection.send(msg2)

        msg = of.ofp_packet_out()
        msg.actions.append(of.ofp_action_output(port = out_port))
        msg.data = packet_in
        msg.in_port = packet_in.in_port
        self.connection.send(msg)

      
    def drop_packet (self,packet,packet_in):
        msg = of.ofp_packet_out()
        msg.buffer_id = packet_in.buffer_id
        msg.in_port = packet_in.in_port
        self.connection.send(msg)
    
    def findSubnet(ip):
        ip_adr = IPAddress(str(ip))
        sales_subnet = IPNetwork("200.20.2.1/24")
        ot_subnet = IPNetwork("200.20.3.1/24")
        it_subnet = IPNetwork("200.20.4.1/24")
        data_subnet = IPNetwork("200.20.1.1/24")
        log.info("------------------------------------- subnet ipadr = %s",ip_adr)

        if ip_adr in sales_subnet:
          return "SALES"
        elif ip_adr in ot_subnet:
          return "OT"
        elif ip_adr in it_subnet:
          return "IT"
        elif ip_adr in data_subnet:
          return "DATACENTER"
        else:
          return "OUT OF NETWORK"

    src_subnet = findSubnet(src_ip)
    dest_subnet = findSubnet(dest_ip)

    log.info("HIII-------------------------------------")
    
    if packet.find('icmp'):
      if (src_subnet == 'SALES' and dest_subnet == 'IT') or (src_subnet == 'IT' and dest_subnet == 'SALES'):
        accept_packet(self,packet,packet_in, switch_id, dest_subnet, port_on_switch, dest_ip)
      elif src_subnet == dest_subnet:
        accept_packet(self,packet,packet_in, switch_id, dest_subnet, port_on_switch, dest_ip)
    elif packet.find('tcp'):
      if (src_subnet == 'DATACENTER' or src_subnet == 'IT' or src_subnet == 'OT') and (dest_subnet == 'DATACENTER' or dest_subnet == 'IT' or dest_subnet == 'OT'):
        accept_packet(self,packet,packet_in, switch_id, dest_subnet, port_on_switch, dest_ip)
      elif src_subnet == dest_subnet:
        accept_packet(self,packet,packet_in, switch_id, dest_subnet, port_on_switch,dest_ip)
    elif packet.find('udp'):
      if (src_subnet == 'OT' and dest_subnet == 'DATACENTER') or (src_subnet == 'DATACENTER' and dest_subnet == 'OT'):
        accept_packet(self,packet,packet_in, switch_id, dest_subnet, port_on_switch, dest_ip)
      elif (src_subnet == 'DATACENTER' and dest_subnet == 'IT') or (src_subnet == 'IT' and dest_subnet == 'DATACENTER'):
        accept_packet(self,packet,packet_in, switch_id, dest_subnet, port_on_switch, dest_ip)
      elif src_subnet == dest_subnet:
        accept_packet(self,packet,packet_in, switch_id, dest_subnet, port_on_switch, dest_ip)
    else:
      drop_packet(self,packet,packet_in)


  def _handle_PacketIn (self, event):
    """
    Handles packet in messages from the switch.
    """
    packet = event.parsed # This is the parsed packet data.
    if not packet.parsed:
      log.warning("Ignoring incomplete packet")
      return

    packet_in = event.ofp # The actual ofp_packet_in message.
    self.do_routing(packet, packet_in, event.port, event.dpid)

def launch ():
  """
  Starts the component
  """
  def start_switch (event):
    log.debug("Controlling %s" % (event.connection,))
    Routing(event.connection)
  core.openflow.addListenerByName("ConnectionUp", start_switch)
